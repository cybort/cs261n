We'll present the design and implementation of meek, a new
censorship-resistant protocol. meek tunnels traffic as HTTPS requests
through third-party web services such as Google App Engine. meek aims to
be resistant to both IP blocking and DPI. IP blocking is defeated by
routing through a high-value third-party service like Google. DPI is
defeated by careful encoding of HTTPS traffic so that it appears to come
from a browser and not a circumvention tool. We'll describe how a censor
can fingerprint TLS, and how we use a web browser extension to
camouflage our HTTPS requests.

We have implemented all the parts of the system. Our presentation will
include an end-to-end demo of the working system.

Future work will deal with more subtle traffic characteristics such as
packet timing and size distributions, to make them more similar to
normal web browsing.

URLs to downloads


CS261N Project Status Report HTTP-based circumvention transport

(1. Sketch the project)

The goal of this project is to implement and evaluate a new blocking-resistant
censorship circumvention protocol, called meek. A censor may inspect, modify,
drop, and spoof any traffic it sees. However, the censor is sensitive to the
need to minimize collateral damage as these false positives incur some kind of
cost. Thus, we are going to engineer a communications channel that is not
blacklisted, and is difficult to characterize and blacklist even after the
censor knows about it.

Our proposed protocol uses widely used HTTPS infrastructure, assumed to be too
valuable for the censor to block. The protocol carries data in HTTP requests and
responses. The client sends traffic through a custom web app on Google App
Engine. It works in places where Google search (www.google.com) is unblocked,
even though App Engine itself (appspot.com) may be blocked. The client program
builds a special HTTPS request and sends it to the Google frontend server--the
server that dispatches requests to different Google services.

At the highest level, the protocol's outward appearance is unblockable: it is
HTTPS to a site that is not blocked. We assume that everything is tunneled
through encrypted and authenticated HTTPS, so that we don't have to precisely
match details such as HTTP header ordering. We propose to evaluate the
protocol's blockability at a lower level, and secure it against the attacks we
foresee. Some specific traffic features we propose to study are: 1) TLS header
characteristics, 2) packet sizes and timing, 3) upstream/downstream ratio, 4)
payload sizes, 5) polling interval, and 6) behavior on random drops.

(2. What completed)

So far we have built off of our prototype implementation in order to make it
more difficult to block. We know that the prototype had a distinctive and easily
blockable TLS signature. We have therefore worked on building the components
needed to make its traffic look like that of a browser. Our current
implementation is a complete end-to-end working system, including client and
server proxy software, a reflector program that runs on Google App Engine, and
integration with a web browser. We've overcome the most immediate obstacle to
unblockability: the ciphersuites and extensions in the TLS Client Hello.

We have also begun measuring characteristics of the LBL traffic trace in
preparation for the next part of our project, which will be to consider more
subtle features such as packet lengths and timing. We've collected similar
traces from various versions of our implementation in progress. We've collected
traces of automated browsing of the front pages of the top 500 Alexa sites
through meek.

We made histograms of traffic characteristics from the LBL trace. A sample of
them is attached. The first, datalen-google.png, shows the payload lengths of
individual TCP packets. Such a distribution appears to be natural and easy to
reproduce: it has many zero-length ACKs, many packets with a length equal to the
MSS, and then there is a small cluster of short packets. On the other hand,
flowduration-google.png has some interesting characteristics that seem harder to
reproduce: notice spikes at 10, 60, 120, 180, and 240 seconds, possibly the
result of HTTP long-polling requests.

We built a Firefox extension that proxies meek's HTTP requests so that they
appear to have come from a browser. Earlier, we knew that the meek client
program itself had a distinctive TLS handshake signature. With the browser
extension, its signature, including ciphersuites and extensions, matches that of
Firefox. The nice thing about a Firefox extension is that it's easy to integrate
into the Tor Browser Bundle without a lot of overhead: we can reuse the Firefox
binary within the bundle. https://trac.torproject.org/projects/tor/ticket/11183

We built a similar extension for Chrome, enabling Chrome-like TLS camouflage.
There were some challenges in building the Chrome extension: Chrome extensions
cannot open a listening socket, and Chrome apps cannot issue HTTP requests. Our
solution therefore involves the combination of an extension and an app.
https://trac.torproject.org/projects/tor/ticket/11393

We built a special release of the Tor Browser Bundle configured to use meek by
default. This release will likely serve as the basis for a test deployment in
the near future. https://trac.torproject.org/projects/tor/ticket/10935

(3. What remains)

The next step is to make meek's traffic harder to distinguish from normal HTTPS
traffic at more subtle levels. We plan to measure probability distributions of
various characteristics of the traces: packet lengths, TCP session durations,
interval between SYNs, interpacket timings, and ratio of upstream and downstream
bytes. We then plan to do statistical tests to see whether meek's distributions
are distinguishable from those of the LBL trace.

We've found that TCP connections in our trace seem to be held open for an
unusually long time up to an hour. We will check whether Firefox in fact holds
connections open that long (for multiple requests to the same host), or whether
the cause is something particular to our system. The Firefox shpped in the Tor
Browser Bundle has special pipelining and keepalive settings designed to
frustrate website fingerprinting, and these may be changing its network
behavior.

We will consider some additional attack scenarios. One is meek's response in the
face of error. The censor could drop, say, every hundredth packet to Google.
Normal web browsers would not be affected much, but meek's encapsulated stream
would have to be restarted. Another attack: The attacker may be able to
fingerprint https://www.google.com/ according to some patterns (first few packet
sizes for example). If the traffic that goes to Google does not exhibit these
patterns, the censor will block the traffic.

(4. Open issues)

It is difficult construct a good model of what constitutes "normal" HTTPS
traffic. If we find that we need to alter our traffic characteristics to better
blend in, we will need a meaningful model to match with. Automated browsing of
the top 500 Alexa sites, for example, probably doesn't match normal user
behavior.

The Chrome extension requires SPDY to be disabled, because SPDY does not support
changing the Host header in the way we require. There is also a Chrome bug
report that indicates that support for changing the HTTP Host header may be
removed in the future:
https://code.google.com/p/chromium/issues/detail?id=158073. We commented on the
bug report and explained how we are using the ability to change the header.

(5. Preference for presentation slot: May 6, 8)

